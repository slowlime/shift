const N = 2

enum State {
  Unsynchronized,
  Entering,
  Choosing,
  Acquiring,
  Acquired,
  AwaitingAcquisition,
  WaitingInLine,
  BreakingTies,
  Critical,
  Releasing,
}

var acquiring: [bool; N] = [false; N]
var ticket: [int; N] = [0; N]
var i: [0..N + 1; N]
var next_ticket: [int; N]
var state: [State; N] = [State::Unsynchronized; N]
var stall: [bool; N] = [false; N]

trans {
  const for self_idx in 0..N {
    alias stall = stall[self_idx]

    either {
      stall <- true
    } or {
      stall <- false
    }

    defaulting {
      alias acquiring = acquiring[self_idx]
      alias ticket = ticket[self_idx]
      alias i = i[self_idx]
      alias next_ticket = next_ticket[self_idx]
      alias state = state[self_idx]
    } in {
      unless stall {
        match state {
          State::Unsynchronized => {
            state <- State::Entering
          }

          State::Entering => {
            acquiring <- true
            i <- 0
            next_ticket <- 0
            state <- State::Entering
          }

          State::Choosing => {
            if i < N {
              next_ticket <- max(next_ticket, ::ticket[i])
              i <- i + 1
            } else {
              state <- State::Acquiring
            }
          }

          State::Acquiring => {
            ticket <- next_ticket + 1
            state <- State::Acquired
          }

          State::Acquired => {
            acquiring <- false
            i <- 0
            state <- State::AwaitingAcquisition
          }

          State::AwaitingAcquisition => {
            if i == self_idx {
              i <- i + 1
            } else if i < N && !::acquiring[i] {
              state <- State::WaitingInLine
            } else if i >= N {
              state <- State::Critical
            }
          }

          State::WaitingInLine => {
            unless ::ticket[i] != 0 && ::ticket[i] < ticket {
              if (::ticket[i] == ticket && i < self_idx) {
                state <- State::BreakingTies
              } else {
                i <- i + 1
                state <- State::AwaitingAcquisition
              }
            }
          }

          State::BreakingTies => {
            unless ::ticket[i] != 0 {
              state <- State::AwaitingAcquisition
            }
          }

          State::Critical => {
            state <- State::Releasing
          }

          State::Releasing => {
            ticket <- 0
            state <- State::Unsynchronized
          }
        }
      }
    }
  }
}
